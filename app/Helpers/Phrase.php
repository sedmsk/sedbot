<?php
declare(strict_types=1);

namespace App\Helpers;

use GuzzleHttp\Client;

/**
 * Class Phrase
 * @package App\Helpers
 */
class Phrase
{
    private const COMPLEMENTS = [
        '–Ø –≤–µ—Ä—é, —á—Ç–æ —É –º–µ–Ω—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è!',
        '–¢—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ —Å–µ–≥–æ–¥–Ω—è –≤—ã–≥–ª—è–¥–∏—à—å!',
        '–ú—ã –æ—Ç–ª–∏—á–Ω–æ –ø–æ–Ω–∏–º–∞–µ–º –¥—Ä—É–≥—É –¥—Ä—É–≥–∞!',
        '–í—Å—ë —Å—Ç–∞–ª–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ —Å —Ç–≤–æ–∏–º –ø–æ—è–≤–ª–µ–Ω–∏–µ–º!',
        '–ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–µ–±–µ —è —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å –ª—É—á—à–µ.',
        '–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –æ—Ç–æ—Ä–≤–∞—Ç—å—Å—è –æ—Ç –ª—é–±—ã—Ö –¥–µ–ª, —á—Ç–æ–±—ã –ø–æ–±—ã—Ç—å —Å–æ –º–Ω–æ–π.',
        '–ü—Ä–∏ –≤–∑–≥–ª—è–¥–µ –Ω–∞ —Ç–µ–±—è –º–æ–µ —Å–µ—Ä–¥—Ü–µ –∑–∞–º–∏—Ä–∞–µ—Ç.',
        '–ö–æ–≥–¥–∞ —è —Å —Ç–æ–±–æ–π, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è.',
        '–°–∞–º–æ–µ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–µ - —ç—Ç–æ –±—ã—Ç—å —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π!',
        '–¢—ã –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –≤—ã–≥–ª—è–¥–∏—à—å.',
        '–¢—ã –≤—Å–µ–≥–¥–∞ –∑–Ω–∞–µ—à—å, —á–µ–º –º–µ–Ω—è –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å.',
        '–¢—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—É–µ—à—å –º–µ–Ω—è –ø—Ä–æ—Å—Ç–æ —Ç–µ–º, —á—Ç–æ —Ç—ã –µ—Å—Ç—å.',
        '–¢—ã —É–º–µ–µ—à—å –Ω–∞–π—Ç–∏ –≤—ã—Ö–æ–¥ –∏–∑ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.',
        '–¢—ã –¥–µ–ª–∞–µ—à—å –Ω–∞—à—É –∂–∏–∑–Ω—å —Å—á–∞—Å—Ç–ª–∏–≤–æ–π.',
        '–í—Å–µ –º–æ–∏ –∑–Ω–∞–∫–æ–º—ã–µ –æ—Ç —Ç–µ–±—è –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ.',
        '–ù–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–µ –∑–∞–º—É—Ç–Ω–µ–Ω—ã –Ω–∏–∫–∞–∫–∏–º–∏ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è–º–∏.',
        '–Ø –≤–∏–∂—É –∏ —Ü–µ–Ω—é, –∫–æ–≥–¥—ã —Ç—ã –¥–µ–ª–∞–µ—à—å –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞ –æ–∫—Ä—É–∂–∞—é—â–∏–º.',
        '–ö–æ–≥–¥–∞ —Ç—ã —Ä—è–¥–æ–º, –º–∏—Ä –≤–æ–∫—Ä—É–≥ –Ω–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—á–∞—Å—Ç—å–µ–º.',
        '–Ø –æ—á–µ–Ω—å —Å–∫—É—á–∞—é, –ø–æ–∫–∞ –∂–¥—É —Ç–µ–±—è.',
        '–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–≤–æ—è —É—Ç–æ–Ω—á–µ–Ω–Ω–æ—Å—Ç—å.',
        '–¢—ã –±–µ–∑—É–º–Ω–æ –≤–∫—É—Å–Ω–æ –≥–æ—Ç–æ–≤–∏—à—å.',
        '–Ø —Ü–µ–Ω—é, —á—Ç–æ —Ç—ã —Å—Ç—Ä–µ–º–∏—à—å—Å—è —Å—Ç–∞—Ç—å –µ—â–µ –ª—É—á—à–µ, —á—Ç–æ–±—ã –Ω—Ä–∞–≤–∏—Ç—å—Å—è –º–Ω–µ –µ—â–µ –±–æ–ª—å—à–µ!',
        '–ú—ã –º–æ–∂–µ–º –≤—Å—ë, –∫–æ–≥–¥–∞ –º—ã –≤–º–µ—Å—Ç–µ!',
    ];

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–º–µ–Ω—Ç–∞
     * @return string
     */
    public static function complement(): string
    {
        $complements = self::COMPLEMENTS;
        shuffle($complements);
        return $complements[array_rand($complements)];
    }

    /**
     * @return string
     * @throws \GuzzleHttp\Exception\GuzzleException
     */
    public static function quote(): string
    {
        $http = new Client();
        $response = $http->request(
            'GET',
            'https://api.forismatic.com/api/1.0/?method=getQuote&key=457653&format=json&lang=ru'
        );

        if ($response->getStatusCode() !== 200) {
            return "–î–æ–±—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—É –∏–∑ –≤–∞—Å —è –∑–Ω–∞—é –≤–¥–≤–æ–µ —Ö—É–∂–µ, —á–µ–º —Å–ª–µ–¥—É–µ—Ç,"
            . " –∞ —Ö—É–¥—É—é –ø–æ–ª–æ–≤–∏–Ω—É ‚Äî –≤–¥–≤–æ–µ –º–µ–Ω—å—à–µ, —á–µ–º –Ω–∞–¥–æ –±—ã. ¬©–ë–∏–ª—å–±–æ –ë—ç–≥–≥–∏–Ω—Å";
        }

        $quote = json_decode((string) $response->getBody(), true);
        return $quote['quoteText'] . ($quote['quoteAuthor'] ? " ¬©{$quote['quoteAuthor']}" : '');
    }

    /**
     * –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É (—Ü–∏—Ç–∞—Ç—É, –∫–æ–º–ø–ª–µ–º–µ–Ω—Ç, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ)
     * @return string
     * @throws \GuzzleHttp\Exception\GuzzleException
     */
    public static function random(): string
    {
        switch (random_int(0, 1)) {
            case 0:
                return self::quote();
            case 1:
                return self::complement();
        }

        return '–ù—É –≤–æ—Ç. –û–ø—è—Ç—å —Ç—ã.';
    }

    /**
     * –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
     * @return string
     */
    public static function unknownCommand(): string
    {
        return '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —á–µ–≥–æ —Ç—ã –æ—Ç –º–µ–Ω—è —Ö–æ—á–µ—à—å üò≠';
    }

    /**
     * –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
     * @return string
     */
    public static function error(): string
    {
        return '–£–ø—Å, –æ—à–∏–±–æ—á–∫–∞ üò°';
    }
}
